import datetime

# Function to load user data from the file into a dictionary
def load_users(file_path):
    users_info = {}
    try:
        with open(file_path, "r") as file:
            for line in file:
                username, password = line.strip().split(",")
                users_info[username] = password
    except FileNotFoundError:
        print("User file not found.")
    return users_info

# Function to authenticate the user
def authenticate_user(users_info):
    while True:
        username = input("Please enter username: ")
        password = input("Please enter password: ")
        if username in users_info and users_info[username].strip() == password:
            print("Login successful!")
            return username
        else:
            print("Invalid username or password. Please try again.")

# Function to register a new user
def register_user():
    new_username = input("Enter new username: ")
    new_password = input("Enter new password: ")
    confirm_password = input("Confirm password: ")
    
    # Check if the username already exists
    users_info = load_users("user.txt")
    if new_username in users_info:
        print("Username already exists. Please choose a different username.")
        return
    
    if new_password == confirm_password:
        try:
            with open("user.txt", "a") as file:
                file.write(f"\n{new_username},{new_password}")
            print("User registered successfully!")
        except Exception as e:
            print(f"Error registering user: {e}")
    else:
        print("Passwords do not match. Registration failed.")

# Function to add a new task
def add_task(username):
    task_username = input("Enter the username of the person to assign the task to: ")
    task_title = input("Enter the title of the task: ")
    task_description = input("Enter the description of the task: ")
    task_due_date = input("Enter the due date of the task (DD-MM-YYY)(eg.22 June 2024): ")
    task_completed = "No"

    with open("tasks.txt", "a") as file:
        file.write(f"\n{task_username}, {task_title}, {task_description}, {task_due_date}, {task_completed}")

    print("Task added successfully.")

# Function to view all tasks
def view_all_tasks():
    with open("tasks.txt", "r") as file:
        lines = file.readlines()

    if not lines:
        print("There are no tasks.")
        return

    print("All Tasks:")
    for i, line in enumerate(lines, 1):
        try:
            task_username, task_title, task_description, task_due_date, task_completed = line.strip().split(", ", 4)
            print(f"{i}. {task_username} - {task_title} - {task_description} (Due: {task_due_date}) Completed: {task_completed}")
        except ValueError:
            print(f"Error processing line: {line}")

# Function to view tasks assigned to a specific user
def view_my_tasks(username):
    with open("tasks.txt", "r") as file:
        lines = file.readlines()

    user_tasks = [line.strip() for line in lines if line.startswith(username)]

    if not user_tasks:
        print("You have no tasks assigned.")
        return

    print("Your tasks:")
    for i, line in enumerate(user_tasks, 1):
        try:
            task_username, task_title, task_description, task_due_date, task_completed = line.split(", ", 4)
            print(f"{i}. {task_title} - {task_description} (Due: {task_due_date}) Completed: {task_completed}")
        except ValueError:
            print(f"Error processing line: {line}")

    task_number = int(input("Enter the number of the task to view/edit or -1 to return to the main menu: "))
    if task_number == -1:
        return

    selected_task = user_tasks[task_number - 1]
    task_username, task_title, task_description, task_due_date, task_completed = selected_task.split(", ", 4)

    action = input("Enter 'c' to mark the task as complete or 'e' to edit the task: ").strip().lower()
    if action == 'c':
        mark_task_as_complete(selected_task, lines)
    elif action == 'e':
        edit_task(selected_task, lines)
    else:
        print("Invalid option. Returning to the main menu.")

# Function to mark a task as complete
def mark_task_as_complete(selected_task, lines):
    task_username, task_title, task_description, task_due_date, task_completed = selected_task.split(", ", 4)

    updated_task = f"{task_username}, {task_title}, {task_description}, {task_due_date}, Yes\n"

    with open("tasks.txt", "w") as file:
        for line in lines:
            if line.strip() == selected_task:
                file.write(updated_task)
            else:
                file.write(line)

    print("Task marked as complete.")

# Function to edit a task
def edit_task(selected_task, lines):
    task_username, task_title, task_description, task_due_date, task_completed = selected_task.split(", ", 4)

    if task_completed.lower() == "yes":
        print("Completed tasks cannot be edited.")
        return

    new_task_title = input(f"Enter new title (current: {task_title}): ").strip() or task_title
    new_task_description = input(f"Enter new description (current: {task_description}): ").strip() or task_description
    new_task_due_date = input(f"Enter new due date (current: {task_due_date}): ").strip() or task_due_date
    new_task_username = input(f"Enter new username (current: {task_username}): ").strip() or task_username

    updated_task = f"{new_task_username}, {new_task_title}, {new_task_description}, {new_task_due_date}, {task_completed}\n"

    with open("tasks.txt", "w") as file:
        for line in lines:
            if line.strip() == selected_task:
                file.write(updated_task)
            else:
                file.write(line)

    print("Task updated successfully.")

# Function to generate reports
def generate_reports():
    tasks = load_tasks("tasks.txt")
    total_tasks = len(tasks)
    completed_tasks = sum(1 for task in tasks if task.split(", ")[-1] == "Yes")
    incomplete_tasks = total_tasks - completed_tasks
    overdue_tasks = sum(1 for task in tasks if datetime.datetime.strptime(task.strip().split(", ")[3], '%d %b %Y') < datetime.datetime.today())
    incomplete_percentage = (incomplete_tasks / total_tasks) * 100
    overdue_percentage = (overdue_tasks / total_tasks) * 100

    task_overview = f'''Task Overview Report:
Total number of tasks: {total_tasks}
Total number of completed tasks: {completed_tasks}
Total number of incomplete tasks: {incomplete_tasks}
Total number of overdue tasks: {overdue_tasks}
Percentage of incomplete tasks: {incomplete_percentage:.2f}%
Percentage of overdue tasks: {overdue_percentage:.2f}%
'''

    try:
        with open("task_overview.txt", "w") as task_file:
            task_file.write(task_overview)
        print("Task Overview Report generated successfully:")
        print(task_overview)
    except Exception as e:
        print(f"Error generating Task Overview Report: {e}")

    try:
        with open("user.txt", "r") as user_file:
            total_users = sum(1 for _ in user_file)
        user_overview = f"User Overview Report:\nTotal number of users: {total_users}\nTotal number of tasks: {total_tasks}\n"

        # If you want to add more information about each user, you can iterate over the users and tasks here
        # and add the required details to the user_overview string

        with open("user_overview.txt", "w") as user_file:
            user_file.write(user_overview)
        print("User Overview Report generated successfully:")
        print(user_overview)
    except FileNotFoundError as e:
        print(f"Error generating User Overview Report: {e}")



# Function to load tasks from a file into a list
def load_tasks(file_path):
    tasks = []
    try:
        with open(file_path, "r") as file:
            for line in file:
                tasks.append(line.strip())
    except FileNotFoundError:
        print("Task file not found.")
    return tasks

# Function to display statistics
def display_statistics():
    try:
        with open("user.txt", "r") as user_file:
            total_users = sum(1 for _ in user_file)
        with open("tasks.txt", "r") as task_file:
            total_tasks = sum(1 for _ in task_file)
        print(f"Total number of users: {total_users}")
        print(f"Total number of tasks: {total_tasks}")
    except FileNotFoundError as e:
        print(f"File not found: {e.filename}")

# Function to display the admin menu and handle choices
def admin_menu(username):
    while True:
        choice = input('''Select one of the following options:
            r - register a user
            a - add task
            va - view all tasks
            vm - view my tasks
            s - display statistics
            gr - generate reports
            e - exit
            : ''').lower()
        if choice == 'r':
            register_user()
        elif choice == 'a':
            add_task(username)
        elif choice == 'va':
            view_all_tasks()
        elif choice == 'vm':
            view_my_tasks(username)
        elif choice == 's':
            display_statistics()
        elif choice == 'gr':
            generate_reports()
        elif choice == 'e':
            print('Goodbye!!!')
            break
        else:
            print("You have entered an invalid input. Please try again.")

# Function to display the user menu and handle choices
def user_menu(username):
    while True:
        choice = input('''Select one of the following options:
            a - add task
            va - view all tasks
            vm - view my tasks
            e - exit
            : ''').lower()
        if choice == 'a':
            add_task(username)
        elif choice == 'va':
            view_all_tasks()
        elif choice == 'vm':
            view_my_tasks(username)
        elif choice == 'e':
            print('Goodbye!!!')
            break
        else:
            print("You have entered an invalid input. Please try again.")

# Main function to run the application
def main():
    users_info = load_users("user.txt")
    username = authenticate_user(users_info)
    if username == "admin":
        admin_menu(username)
    else:
        user_menu(username)

if __name__ == "__main__":
    main()
